<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- We need a doctype to allow us to use special characters like &nbsp; 
	 We use a "strict" DTD to make IE follow the alignment rules. -->
	 
<html xmlns:t="http://tapestry.apache.org/schema/tapestry_5_3.xsd">
<head>
	<link rel="stylesheet" type="text/css" href="${context:css/examples/examples.css}"/>
</head>
<body>
	<h1>Event Links</h1>

	The link generated by an <strong>EventLink</strong> will send an event name and parameters in the URL.<br/>
	Here are 3 EventLinks that send events "add" and "clear":<br/>
		
	<div class="eg"> 
		Count = ${count}.<br/>
		<t:eventlink t:event="add" t:context="literal:1">Add 1</t:eventlink><br/>
		<t:eventlink t:event="add" t:context="literal:2">Add 2</t:eventlink><br/>  
		<t:eventlink t:event="clear">Clear</t:eventlink>
	</div>	  

	The links above have URLs ike these:
	<ul>
		<li><code>http://thehost/jumpstart/examples/input/eventlinks:add/1?t:ac=n</code></li>
		<li><code>http://thehost/jumpstart/examples/input/eventlinks:add/2?t:ac=n</code></li>
		<li><code>http://thehost/jumpstart/examples/input/eventlinks:clear?t:ac=n</code></li>
	</ul>

	To handle to these events, provide methods to handle events <em>add</em> and <em>clear</em>. We call these <strong>event handler methods</strong>.<br/><br/>

	When one of these URLs reaches the server-side, here is what happens:
	<ul>
		<li>Tapestry gets an instance of the page, <em>examples/input/eventlinks</em>, activates it, and notifies the corresponding component, an EventLink.</li>
		<li>EventLink "bubbles up" the given event, <em>add</em> or <em>clear</em>, and its parameter(s).</li>
		<li>The page has handlers for the events: <em>onAdd(int count)</em> and <em>onClear()</em>.</li>
		<li>The handlers return void which means stay on the same page. For alternatives, see the Return Types example.</li>
	</ul>

	Now, what happens next may surprise you. Tapestry does not then render the page and return it. Why not?<br/>
	Because Tapestry uses the <a href="http://en.wikipedia.org/wiki/Post/Redirect/Get">Post/Redirect/Get</a> pattern: it generates a 
	<strong>render request</strong> URL to the next page and returns it to the browser as a redirect, an 
	<a href="http://en.wikipedia.org/wiki/HTTP_302">HTTP 302</a>. So when the next page shows, its URL will NOT be the URL 
	that triggered the event.  Instead, it will be a URL that is safe to reload, or bookmark, or return to with the Back button. 
	The cost is 2 trips to the server, but it's worth it.<br/><br/>
	
	Actually, clicking on an EventLink link sends a GET, not a POST, so it's actually a Get/Redirect/Get!<br/><br/> 
	
	Why do we have an <em>onPassivate()</em> method? Well, for Tapestry to generate a <em>render request</em> (see above) 
	it needs the page's activation context. It gets it by triggering the <em>passivate</em> event on the page and it is the duty 
	of a <em>passivate</em> event handler to return the activation context, which our <em>onPassivate()</em> does.<br/><br/>

	References:	
	<a href="http://tapestry.apache.org/5.3/apidocs/org/apache/tapestry5/corelib/components/EventLink.html">EventLink</a>,
	<a href="http://tapestry.apache.org/page-navigation.html">Page Navigation</a>, 
	<a href="http://tapestry.apache.org/component-events.html">Component Events</a>.<br/><br/>
	
	<t:pagelink t:page="Index">Home</t:pagelink><br/><br/>

	<t:sourcecodedisplay src="/web/src/main/java/jumpstart/web/pages/examples/input/EventLinks.tml"/>
	<t:sourcecodedisplay src="/web/src/main/java/jumpstart/web/pages/examples/input/EventLinks.java"/>
	<t:sourcecodedisplay src="/web/src/main/java/jumpstart/web/css/examples/examples.css"/>
</body>
</html>