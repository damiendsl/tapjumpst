<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- We need a doctype to allow us to use special characters like &nbsp; 
	 We use a "strict" DTD to make IE follow the alignment rules. -->
	 
<html xmlns:t="http://tapestry.apache.org/schema/tapestry_5_3.xsd">
<head>
	<link rel="stylesheet" type="text/css" href="${context:css/examples/examples.css}"/>
</head>
<body>
	<h1>Forms (1)</h1>
	
	The form generated by <strong>Form</strong> will send its contents in an HTTP POST.<br/><br/>
	
	Here is a simple Form:
	
	<div class="eg">
		<t:form t:id="names">
			<t:errors/>
			<table>
				<tr>
					<td>First Name:</td>
					<td><t:textfield t:id="firstName"/></td>
				</tr>
				<tr>
					<td>Last Name:</td>
					<td><t:textfield t:id="lastName"/></td>
				</tr>
				<tr>
					<td></td>
					<td><input type="submit" value="Display"/></td>
				</tr>
			</table>
		</t:form>
	 </div>

 	Clicking the button will send a URL like this: <code>http://thehost/jumpstart/examples/input/forms1.names</code><br/><br/>
	
 	When this URL reaches the server-side, here is what happens:
 	<ul>
		<li>Tapestry gets an instance of the page, <em>examples/input/forms1</em>, activates it, and notifies the corresponding component, <em>names</em>.</li>
		<li>Form always "bubbles up" a series of events: <em>prepareForSubmit</em>, <em>validate</em>, <em>success</em> (or <em>failure</em>), etc.</li>	
		<li>The page has handlers for two of them: <em>onValidateFromNames()</em> and <em>onSuccess()</em>.</li>
		<li>If <em>onValidateFromNames()</em> records an error, then the next event from the form will be <em>failure</em>, not <em>success</em>.</li>
		<li><em>onSuccess()</em> returns a page object, which tells Tapestry what page to show next.</li>
 	</ul>
	
	Tapestry does <em>not</em> immediately render page 2 and return it. Why not?<br/>
	Because Tapestry uses the <a href="http://en.wikipedia.org/wiki/Post/Redirect/Get">Post/Redirect/Get</a> pattern: it 
	generates a <strong>render request</strong> URL to the next page and returns it to the browser as a redirect, an 
	<a href="http://en.wikipedia.org/wiki/HTTP_302">HTTP 302</a>. When the next page shows, its URL will NOT be the URL 
	that triggered the event.  Instead, it will be a URL that is safe to reload, or bookmark, or return to with the Back button. 
	The cost is 2 trips to the server, but it's worth it.<br/><br/>

	Why do we use the long method name <em>onValidateFromNames()</em> instead of just <em>onValidate()</em>? <br/>
	Because this handler is for handling <em>Validate</em> from the Form, 
	not <em>validate</em> from its TextFields (firstName and lastName) which also bubble up <em>validate</em>.<br/><br/>
	
	References: <a href="http://tapestry.apache.org/5.3/apidocs/org/apache/tapestry5/corelib/components/Form.html">Form</a>, 
	<a href="http://tapestry.apache.org/5.3/apidocs/org/apache/tapestry5/corelib/components/TextField.html">TextField</a>, 
	<a href="http://tapestry.apache.org/5.3/apidocs/org/apache/tapestry5/corelib/components/Errors.html">Errors</a>,
	<a href="http://tapestry.apache.org/forms-and-validation.html#FormsandValidation-Formcomponent">Form Component</a>,  
	<a href="http://wiki.apache.org/tapestry/Tapestry5HowToUseForms">How To Use Forms</a>, 
	<a href="http://tapestry.apache.org/page-navigation.html">Page Navigation</a>, 
	<a href="http://tapestry.apache.org/component-events.html">Component Events</a>.<br/><br/>

	<t:pagelink t:page="Index">Home</t:pagelink><br/><br/>

	<t:sourcecodedisplay src="/web/src/main/java/jumpstart/web/pages/examples/input/Forms1.tml"/>
	<t:sourcecodedisplay src="/web/src/main/java/jumpstart/web/pages/examples/input/Forms1.java"/>
	<t:sourcecodedisplay src="/web/src/main/java/jumpstart/web/css/examples/examples.css"/>
</body>
</html>