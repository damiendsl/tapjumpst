<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- We need a doctype to allow us to use special characters like &nbsp; 
	 We use a "strict" DTD to make IE follow the alignment rules. -->
	 
<html xmlns:t="http://tapestry.apache.org/schema/tapestry_5_3.xsd">
<head>
	<link rel="stylesheet" type="text/css" href="${context:css/examples/examples.css}"/>
</head>
<body>
	<h1>Storing Data in a Page</h1>
	
	Sometimes there are fields in a page that you want the page to store for use next time you access the page.<br/>
	To do this, annotate those fields with <em>@Persist</em>.<br/><br/>
	
	In this example we use @Persist on a field called <em>count</em>. We increment <em>count</em> every time the page is rendered.<br/>
	If you reload this page or revisit it, you will see that <em>count</em> has been remembered and incremented.
	
	<div class="eg">
		The number of times you have visited this page during this session: <strong>${count}</strong>
	</div>
	
	The default strategy for @Persist is "session", which means store the field's value in your session. 
	The page can remove it from the session by setting it to null or using the 
	<code>discardPersistentFieldChanges()</code> method of ComponentResources, as demonstrated by this link:
	<a t:type="eventlink" t:event="clear" href="#">Remove count from the Session and go Home</a>. 
	To see what's currently stored in your session, go to the Display Session Contents example.<br/><br/>
	
	<strong>Caution</strong><br/>
	<ul>
		<li>The "session" strategy is risky because many browsers share the same session across windows and tabs.
			The danger is that the field will be overwritten if the user opens a new window or tab and visits the same page. 
			We address this issue in the Wizard examples by creating a "conversation".</li>
		<li>"Session" persistence also has an impact on clustered servers.  Howard discusses this in 
			<a href="http://thread.gmane.org/gmane.comp.java.tapestry.user/65410/focus=65426">Tapestry App Replication</a> 
			(note that <em>@ApplicationState</em> is the old name for <em>@SessionState</em>)
			and the documentation discusses it in 
			<a href="http://tapestry.apache.org/persistent-page-data.html#PersistentPageData-ClusteringIssues">Clustering Issues</a>.</li>
	</ul>
	
	Alternative strategies for @Persist include "flash" and "client" - see 
	<a href="http://tapestry.apache.org/persistent-page-data.html">Persistent Page Data</a>. 
	You can add your own - see
	<a href="http://wiki.apache.org/tapestry/Tapestry5HowToUsePersistentFieldStrategy">How To Use Persistent Field Strategy</a>.<br/><br/> 
	
	References: <a href="http://tapestry.apache.org/persistent-page-data.html">Persistent Page Data</a>, 
	<a href="http://tapestry.apache.org/5.3/apidocs/org/apache/tapestry5/annotations/Persist.html">@Persist</a>, 
	<a href="http://tapestry.apache.org/5.3/apidocs/org/apache/tapestry5/PersistenceConstants.html">PersistenceConstants</a>, 
	<a href="http://tapestry.apache.org/persistent-page-data.html#PersistentPageData-ClusteringIssues">Clustering Issues</a>, 
	<a href="http://wiki.apache.org/tapestry/Tapestry5HowToUsePersistentFieldStrategy">How To Use Persistent Field Strategy</a>.<br/><br/>
	
	<a t:type="pagelink" t:page="Index" href="#">Home</a><br/><br/>

	<t:sourcecodedisplay src="/web/src/main/java/jumpstart/web/pages/examples/state/StoringDataInAPage.tml"/>
	<t:sourcecodedisplay src="/web/src/main/java/jumpstart/web/pages/examples/state/StoringDataInAPage.java"/>
	<t:sourcecodedisplay src="/web/src/main/java/jumpstart/web/css/examples/examples.css"/>
	<t:sourcecodedisplay src="/web/src/main/java/jumpstart/web/state/examples/state/Count.java"/>
</body>
</html>